<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Albert Wu</title>
  
  <subtitle>Adventures in Javascript</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.albertywu.com/"/>
  <updated>2018-09-24T23:29:29.476Z</updated>
  <id>http://www.albertywu.com/</id>
  
  <author>
    <name>Albert Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Subsets</title>
    <link href="http://www.albertywu.com/2018/09/24/subsets/"/>
    <id>http://www.albertywu.com/2018/09/24/subsets/</id>
    <published>2018-09-24T23:24:08.000Z</published>
    <updated>2018-09-24T23:29:29.476Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>Pretty, don‚Äôt you think?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  write a function that returns all subsets of a given array</span></span><br><span class="line"><span class="comment">  O(2^n)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subsets</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length === <span class="number">0</span>) <span class="keyword">return</span> [[]]</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> [first, ...rest] = array</span><br><span class="line">    <span class="keyword">let</span> restSubsets = subsets(rest)</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      ...restSubsets,</span><br><span class="line">      ...restSubsets.map(<span class="function"><span class="params">subset</span> =&gt;</span> [first, ...subset])</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;2 minute read&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.albertywu.com/categories/javascript/"/>
    
    
      <category term="interview question" scheme="http://www.albertywu.com/tags/interview-question/"/>
    
      <category term="javascript" scheme="http://www.albertywu.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>An even simpler javascript tokenizer</title>
    <link href="http://www.albertywu.com/2018/09/15/tokenize/"/>
    <id>http://www.albertywu.com/2018/09/15/tokenize/</id>
    <published>2018-09-16T02:51:30.000Z</published>
    <updated>2018-09-16T23:57:23.700Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>What‚Äôs the easiest way you know of to tokenize an arithmetic expression in javascript? Let‚Äôs say you‚Äôre building a calculator application, and want this to happen:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  tokenize(<span class="string">'100-(5.4 + 2/3)*5'</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// [ '100', '-', '(', '5.4', '+', '2/3', ')', '*', '5' ]</span></span><br></pre></td></tr></table></figure></p><p>Before you reach into your npm module bag-o-tricks, realize that this can be done in one line of javascript using a secret feature of the string <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noopener">split</a> method. Behold:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'100-(5.4+2/3)*5'</span></span><br><span class="line">  .split(<span class="regexp">/(-|\+|\/|\*|\(|\))/</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">s</span> =&gt;</span> s.trim())</span><br><span class="line">  .filter(<span class="function"><span class="params">s</span> =&gt;</span> s !== <span class="string">''</span>)</span><br><span class="line"><span class="comment">// [ '100', '-', '(', '5.4', '+', '2/3', ')', '*', '5' ]</span></span><br></pre></td></tr></table></figure><p>Excuse me? What‚Äôs that hot mess inside the <code>split</code> function? Let‚Äôs break it down step by step using a few examples of increasing complexity:</p><hr><h4 id="Example-1-s-split"><a href="#Example-1-s-split" class="headerlink" title="Example 1: s.split(/-/)"></a>Example 1: <code>s.split(/-/)</code></h4><p>Pretty obvious: this splits the string <code>s</code> anywhere it sees the minus sign symbol <code>-</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'3-2-1'</span>.split(<span class="regexp">/-/</span>)</span><br><span class="line"><span class="comment">// ["3", "2", "1"]</span></span><br></pre></td></tr></table></figure><hr><h4 id="Example-2-s-split"><a href="#Example-2-s-split" class="headerlink" title="Example 2: s.split(/(-)/)"></a>Example 2: <code>s.split(/(-)/)</code></h4><p>The only difference from the previous example is the enclosing parens in the regex, which creates a capturing group. Here‚Äôs the key point of the entire article: <span class="highlight-text yellow">If the regular expression contains capturing parentheses around the separator, then each time the separator is matched, the results of the capturing group are spliced into the output array.</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'3-2-1'</span>.split(<span class="regexp">/(-)/</span>)</span><br><span class="line"><span class="comment">// ["3", "-", "2", "-", "1"]</span></span><br></pre></td></tr></table></figure><hr><h4 id="Example-3-s-split"><a href="#Example-3-s-split" class="headerlink" title="Example 3:  s.split(/(-|\+)/)"></a>Example 3:  <code>s.split(/(-|\+)/)</code></h4><p>This builds off the previous example by adding support for the addition symbol <code>\+</code>. The backslash <code>\</code> is required to escape the regex. The vertical pipe <code>|</code> acts as an OR statement (match <code>-</code> OR <code>+</code>).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'3-2-1+2+3'</span>.split(<span class="regexp">/(-|\+)/</span>)</span><br><span class="line"><span class="comment">// ["3", "-", "2", "-", "1", "+", "2", "+", "3"]</span></span><br></pre></td></tr></table></figure><hr><h4 id="The-Final-Boss-tying-everything-together"><a href="#The-Final-Boss-tying-everything-together" class="headerlink" title="The Final Boss (tying everything together)"></a>The Final Boss (tying everything together)</h4><p>Hopefully, you now have all tools needed to understand <code>.split(/(-|\+|\/|\*|\(|\))/)</code>. Hope that made sense! Let me know in the comments if you liked this article, or ping me on <a href="https://twitter.com/albertywu" target="_blank" rel="noopener">twitter</a>!</p>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;5 minute read&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.albertywu.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.albertywu.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Bag it up üí∞ Greedy Algorithms in Javascript</title>
    <link href="http://www.albertywu.com/2018/09/13/greedy/"/>
    <id>http://www.albertywu.com/2018/09/13/greedy/</id>
    <published>2018-09-13T20:43:10.000Z</published>
    <updated>2018-09-17T06:14:31.284Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><!-- toc --><hr><h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>One less understood idea among javascript engineers (unless you happen to be studying up for interviews) is the use of greedy algorithms. A <a href="https://en.wikipedia.org/wiki/Greedy_algorithm" target="_blank" rel="noopener">greedy algorithm</a> makes whatever choice seems best at the moment, and solves the subproblems that arise later. To use a visual metaphor, we put the result of each subproblem in a ‚Äúbag‚Äù and then repeat with successively smaller subproblems. When the subproblem is empty (nothing left to do), we return the contents of the bag.</p><p>As it turns out, this strategy can lead to some very elegant solutions to practical problems. In the rest of this article, we‚Äôll explore four seemingly different problems that <span class="highlight-text yellow">have almost identical solutions </span> (hint: they all use a greedy algorithm). In closing, we‚Äôll take a closer look at the structure common to all four problems. Let‚Äôs dive in!</p><hr><h4 id="Example-coin-change-problem"><a href="#Example-coin-change-problem" class="headerlink" title="Example: coin change problem"></a>Example: coin change problem</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You are given coins of different denominations and a total amount of </span><br><span class="line">money. Write a function that returns the smallest set of coins that </span><br><span class="line">sums to that amount.</span><br></pre></td></tr></table></figure><p>Take a moment to consider how you‚Äôd do this before continuing‚Ä¶ (answer is right below)</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  amount: 42</span></span><br><span class="line"><span class="comment">  coins: [1, 5, 10, 25]</span></span><br><span class="line"><span class="comment">  output: [25, 10, 5, 1, 1]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeChange</span>(<span class="params">amount, coins, bag = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (amount === <span class="number">0</span>) <span class="keyword">return</span> bag</span><br><span class="line">  <span class="keyword">let</span> largestCoin = getLargestCoin(amount, coins)</span><br><span class="line">  <span class="keyword">return</span> makeChange(amount - largestCoin, coins, bag.concat([largestCoin]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLargestCoin</span>(<span class="params">amount, coins</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sortedCoins = coins.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = sortedCoins.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sortedCoins[i] &lt;= amount) <span class="keyword">return</span> sortedCoins[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'no coin that divides amount'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  makeChange(<span class="number">42</span>, [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>])</span><br><span class="line">)</span><br><span class="line"><span class="comment">// [25, 10, 5, 1, 1]</span></span><br></pre></td></tr></table></figure><p>We keep a ‚Äúbag‚Äù of coins and recursively add coins to the bag that matches our selection criteria <code>(pick largest coin denomination that is &lt; amount)</code>. If the largest coin has value <code>C</code>, we add <code>C</code> to the bag and call <code>makeChange</code> with <code>amount - C</code>. This continues until the <code>amount</code> is 0, and the bag of coins is returned.</p><p>A quick note on the expression <code>{ ...bag, ...{ [fn(array[0])]: matches } }</code> since there‚Äôs a lot going on there. First of all, what does <code>{ ...a, ...b }</code> mean? This is called <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals" target="_blank" rel="noopener">object spreading</a>. Think of it as smooshing together objects a and b to create a new object. So <code>{ ...bag, ...somethingElse }</code> will combine the object <code>bag</code> with object <code>somethingElse</code>. In this case, <code>somethingElse</code> is the object <code>{ [fn(array[0])]: matches }</code> which is the new group we‚Äôre inserting into the bag.</p><p>I‚Äôll also explain the difference between <code>{ [key]: value }</code> and <code>{ key: value }</code>. Those square braces signify <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names" target="_blank" rel="noopener">computed properties</a>. You can stick any expression between the square braces, and the value of that expression will become the value of the key. So for example <code>{ [1 + 1]: 2}</code> would be the same as <code>{ 2: 2 }</code>.</p><hr><h4 id="Example-groupBy"><a href="#Example-groupBy" class="headerlink" title="Example: groupBy"></a>Example: groupBy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Implement the &quot;groupBy&quot; function which takes an array A and a function F,</span><br><span class="line">and returns an object composed of keys generated from the results of </span><br><span class="line">running each element of A through F. The corresponding value of each key </span><br><span class="line">is an array of elements responsible for generating the key.</span><br></pre></td></tr></table></figure><p>Take a moment to consider how you‚Äôd do this before continuing‚Ä¶ (answer is right below)</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  input: [6.1, 4.2, 6.3]</span></span><br><span class="line"><span class="comment">  function: Math.floor</span></span><br><span class="line"><span class="comment">  output: &#123; '4': [ 4.2 ], '6': [ 6.1, 6.3 ] &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupBy</span>(<span class="params">array, fn, bag = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length === <span class="number">0</span>) <span class="keyword">return</span> bag</span><br><span class="line">  <span class="keyword">let</span> matches = array.filter(<span class="function"><span class="params">x</span> =&gt;</span> fn(x) === fn(array[<span class="number">0</span>]))</span><br><span class="line">  <span class="keyword">let</span> rest = array.filter(<span class="function"><span class="params">x</span> =&gt;</span> fn(x) !== fn(array[<span class="number">0</span>]))</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    groupBy(</span><br><span class="line">      rest,</span><br><span class="line">      fn,</span><br><span class="line">      &#123; ...bag, ...&#123; [fn(array[<span class="number">0</span>])]: matches &#125; &#125;</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  groupBy([<span class="number">6.1</span>, <span class="number">4.2</span>, <span class="number">6.3</span>], <span class="built_in">Math</span>.floor)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// &#123; '4': [ 4.2 ], '6': [ 6.1, 6.3 ] &#125;</span></span><br></pre></td></tr></table></figure><p>Keep a ‚Äúbag‚Äù of groups and recursively add groups to the bag that match our selection criteria <code>fn(x) === fn(array[0])</code>. Then call <code>groupBy</code> on the remaining elements, with the updated bag. This continues until the original array is empty, and the bag is returned.</p><hr><h4 id="Example-activity-selection-problem"><a href="#Example-activity-selection-problem" class="headerlink" title="Example: activity selection problem"></a>Example: activity selection problem</h4><p>Another classic problem is the <a href="https://en.wikipedia.org/wiki/Activity_selection_problem" target="_blank" rel="noopener">activity selection problem</a>. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Imagine you are trying to schedule a room for multiple competing events, </span><br><span class="line">each having its own time requirements (start and end time). How do you </span><br><span class="line">schedule the room such that you can host the maximum number of events </span><br><span class="line">with no scheduling conflicts?</span><br></pre></td></tr></table></figure><p>Take a moment to consider how you‚Äôd do this before continuing‚Ä¶ (answer is right below)</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Appointment</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, from, to) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.from = <span class="keyword">from</span></span><br><span class="line">    <span class="keyword">this</span>.to = to</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push new appointments onto bag one-by-one until no more appointments are left</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxAppointments</span>(<span class="params">appointments, bag = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (appointments.length === <span class="number">0</span>) <span class="keyword">return</span> bag</span><br><span class="line">  <span class="keyword">let</span> selectedAppointment = appointments.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.to - b.to)[<span class="number">0</span>] <span class="comment">// sort from earliest end to latest end</span></span><br><span class="line">  <span class="keyword">let</span> futureCandidates = appointments.filter(<span class="function"><span class="params">a</span> =&gt;</span> a.from &gt; selectedAppointment.to)</span><br><span class="line">  <span class="keyword">return</span> getMaxAppointments(</span><br><span class="line">    futureCandidates,</span><br><span class="line">    bag.concat([selectedAppointment])</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> Appointment(<span class="string">'brush teeth'</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="keyword">new</span> Appointment(<span class="string">'wash face'</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">let</span> a3 = <span class="keyword">new</span> Appointment(<span class="string">'make coffee'</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> a4 = <span class="keyword">new</span> Appointment(<span class="string">'blowdry hair'</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> a5 = <span class="keyword">new</span> Appointment(<span class="string">'take shower'</span>, <span class="number">4.5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="keyword">let</span> a6 = <span class="keyword">new</span> Appointment(<span class="string">'eat cereal'</span>, <span class="number">7</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  getMaxAppointments([a1, a2, a3, a4, a5, a6]).map(<span class="function"><span class="params">a</span> =&gt;</span> a.name)</span><br><span class="line">) </span><br><span class="line"><span class="comment">// ['brush teeth', 'blowdry hair', 'take shower', 'eat cereal']</span></span><br></pre></td></tr></table></figure><hr><h4 id="Example-collect-anagrams"><a href="#Example-collect-anagrams" class="headerlink" title="Example: collect anagrams"></a>Example: collect anagrams</h4><p>For our final example, we‚Äôll consider the problem of <a href="https://leetcode.com/problems/group-anagrams/description/" target="_blank" rel="noopener">grouping anagrams</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Given an array of strings, group anagrams together.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line">Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Take a moment to consider how you‚Äôd do this before continuing‚Ä¶ (answer is right below)</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">collectAnagrams</span>(<span class="params">words, bag = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (words.length === <span class="number">0</span>) <span class="keyword">return</span> bag</span><br><span class="line">  <span class="keyword">let</span> matches = words.filter(<span class="function"><span class="params">w</span> =&gt;</span> isAnagram(w, words[<span class="number">0</span>]))</span><br><span class="line">  <span class="keyword">let</span> rest = words.filter(<span class="function"><span class="params">w</span> =&gt;</span> !isAnagram(w, words[<span class="number">0</span>]))</span><br><span class="line">  <span class="keyword">return</span> collectAnagrams(</span><br><span class="line">    rest,</span><br><span class="line">    bag.concat([matches])</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringSorter</span>(<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a.localeCompare(b) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAnagram</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> aSorted = a.toLowerCase().split(<span class="string">''</span>).sort(stringSorter).join(<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">let</span> bSorted = b.toLowerCase().split(<span class="string">''</span>).sort(stringSorter).join(<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">return</span> aSorted === bSorted</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = [<span class="string">'bag'</span>, <span class="string">'gab'</span>, <span class="string">'foo'</span>, <span class="string">'abg'</span>, <span class="string">'oof'</span>, <span class="string">'bum'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(collectAnagrams(x))</span><br><span class="line"><span class="comment">// [['bag', 'gab', 'abg'], ['foo', 'oof'], ['bum']]</span></span><br></pre></td></tr></table></figure><hr><h4 id="The-Common-Structure"><a href="#The-Common-Structure" class="headerlink" title="The Common Structure"></a>The Common Structure</h4><p>So what do all of these problems have in common? For every iteration through the loop, we select a subset of items from the input and add it to the bag. The remaining items feed through to the next iteration of the loop as the next input. When the input is empty, we return the bag.</p><p>The following diagram might help clarify things, using our groupBy example:</p><p><img src="https://user-images.githubusercontent.com/1920766/45563508-693f4680-b802-11e8-9891-1879d832b4ff.jpg" alt="visualization"></p><p>If you‚Äôre more comfortable with pseudocode, here is the pattern we used in all of the previous examples:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bagItUp</span>(<span class="params">things, bag = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (things is empty) <span class="keyword">return</span> bag</span><br><span class="line">  <span class="keyword">let</span> thingsToPutInBag = ...</span><br><span class="line">  <span class="keyword">let</span> restOfThings = ...</span><br><span class="line">  <span class="keyword">return</span> bagItUp(</span><br><span class="line">    restOfThings,</span><br><span class="line">    bag + thingsToPutInBag</span><br><span class="line">  )  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Connect"><a href="#Connect" class="headerlink" title="Connect"></a>Connect</h4><p>What do you think? Have you solved similar problems at work or personal projects using greedy algorithms? Let me know in the comments below, or on <a href="https://twitter.com/albertywu" target="_blank" rel="noopener">twitter</a>!</p>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;15 minute read&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.albertywu.com/categories/javascript/"/>
    
    
      <category term="greedy algorithm" scheme="http://www.albertywu.com/tags/greedy-algorithm/"/>
    
      <category term="interview question" scheme="http://www.albertywu.com/tags/interview-question/"/>
    
      <category term="javascript" scheme="http://www.albertywu.com/tags/javascript/"/>
    
  </entry>
  
</feed>
